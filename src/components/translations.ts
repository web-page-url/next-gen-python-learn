export const TRANSLATIONS: Record<string, Record<string, string>> = {
  "en-US": {
    "helloWorldTitle": "Hello World",
    "helloWorldDescription": "Welcome to Python! Let's start with the traditional first program.",
    "helloWorldTask": "Write a program that prints 'Hello, World!' to the console.",
    "helloWorldHint": "Use the print() function with the text in quotes: print('Hello, World!')",
    "variablesNumbersTitle": "Variables and Numbers",
    "variablesNumbersDescription": "Learn to store and work with numbers using variables.",
    "variablesNumbersTask": "Create a variable called 'age' with value 25, then print it.",
    "variablesNumbersHint": "Create a variable: age = 25, then print it: print(age)",
    "stringVariablesTitle": "String Variables",
    "stringVariablesDescription": "Work with text data using string variables.",
    "stringVariablesTask": "Create a variable called 'name' with your name, then print 'Hello, [name]!'",
    "stringVariablesHint": "Use string concatenation or f-strings: print(f'Hello, {name}!')",
    "userInputTitle": "User Input",
    "userInputDescription": "Learn to get input from users and respond.",
    "userInputTask": "Ask for the user's favorite color and print 'Your favorite color is [color]'",
    "userInputHint": "Use input() to get user input: color = input('What is your favorite color? ')",
    "basicMathTitle": "Basic Math",
    "basicMathDescription": "Perform mathematical operations in Python.",
    "basicMathTask": "Calculate 15 + 27 and print the result.",
    "basicMathHint": "Use the + operator: print(15 + 27)",
    "conditionalsTitle": "Conditionals",
    "conditionalsDescription": "Make decisions in your code with if statements.",
    "conditionalsTask": "Check if the number 10 is greater than 5. If true, print 'Yes, 10 is greater than 5'",
    "conditionalsHint": "Use if statement: if number > 5: print('Yes, 10 is greater than 5')",
    "forLoopsTitle": "For Loops",
    "forLoopsDescription": "Repeat actions using for loops.",
    "forLoopsTask": "Print numbers from 1 to 3 using a for loop.",
    "forLoopsHint": "Use range(): for i in range(1, 4): print(i)",
    "whileLoopsTitle": "While Loops",
    "whileLoopsDescription": "Use while loops for conditional repetition.",
    "whileLoopsTask": "Print numbers from 1 to 3 using a while loop.",
    "whileLoopsHint": "Increment count each iteration: while count <= 3: print(count); count += 1",
    "listsBasicsTitle": "Lists Basics",
    "listsBasicsDescription": "Store multiple items in lists.",
    "listsBasicsTask": "Create a list with fruits ['apple', 'banana', 'orange'] and print the second item.",
    "listsBasicsHint": "Lists use zero-based indexing: fruits[1] gets the second item",
    "listOperationsTitle": "List Operations",
    "listOperationsDescription": "Add and modify list items.",
    "listOperationsTask": "Create a list [1, 2, 3], add the number 4, then print the entire list.",
    "listOperationsHint": "Use append() method: numbers.append(4), then print(numbers)",
    "functionsBasicsTitle": "Functions Basics",
    "functionsBasicsDescription": "Create reusable code with functions.",
    "functionsBasicsTask": "Define a function called 'greet' that prints 'Hello!' and then call it.",
    "functionsBasicsHint": "Use def keyword: def greet(): print('Hello!'), then call greet()",
    "functionsParametersTitle": "Functions with Parameters",
    "functionsParametersDescription": "Pass data to functions using parameters.",
    "functionsParametersTask": "Create a function 'say_hello' that takes a name parameter and prints 'Hello, [name]!'. Call it with 'World'.",
    "functionsParametersHint": "def say_hello(name): print(f'Hello, {name}!'), then call say_hello('World')",
    "dictionariesTitle": "Dictionaries",
    "dictionariesDescription": "Store key-value pairs using dictionaries.",
    "dictionariesTask": "Create a dictionary with person info: name='Alice', age=30. Print the name.",
    "dictionariesHint": "Use curly braces: person = {'name': 'Alice', 'age': 30}, access with person['name']",
    "stringMethodsTitle": "String Methods",
    "stringMethodsDescription": "Manipulate strings with built-in methods.",
    "stringMethodsTask": "Take the string 'python programming' and print it in uppercase.",
    "stringMethodsHint": "Use the upper() method: text.upper()",
    "finalChallengeTitle": "Final Challenge",
    "finalChallengeDescription": "Combine everything you've learned!",
    "finalChallengeTask": "Create a list of numbers [1,2,3,4,5], use a for loop to print each number multiplied by 2.",
    "finalChallengeHint": "Loop through the list: for num in numbers: print(num * 2)",
    "starterCodeComment": "# Write your code here\n",
    "createVariableComment": "# Create a variable and print it\n",
    "createStringComment": "# Create a string variable\n",
    "getUserInputComment": "# Get user input and respond\n",
    "calculateSumComment": "# Calculate and print the sum\n",
    "useIfStatementComment": "# Use an if statement\nnumber = 10\n",
    "useForLoopComment": "# Use a for loop to print numbers\n",
    "useWhileLoopComment": "# Use a while loop\ncount = 1\n",
    "createListComment": "# Create a list and access items\n",
    "createListAddComment": "# Create list and add item\n",
    "defineFunctionComment": "# Define and call a function\n",
    "functionParameterComment": "# Function with parameter\n",
    "createDictionaryComment": "# Create and use a dictionary\n",
    "stringMethodsComment": "# Use string methods\ntext = 'python programming'\n",
    "finalChallengeComment": "# Final challenge - combine concepts\n",
    "appTitle": "LearnPy",
    "levelsProgress": "Levels",
    "streakLabel": "streak",
    "levelButton": "Level",
    "overallProgress": "Overall Progress",
    "selectLevel": "Select Level",
    "closeButton": "Ã—",
    "taskLabel": "Task:",
    "showHint": "Show Hint",
    "hideHint": "Hide Hint",
    "pythonCodeEditor": "Python Code Editor",
    "resetButton": "Reset",
    "runCodeButton": "Run Code",
    "codeEditorPlaceholder": "Write your Python code here...",
    "previousLevel": "Previous Level",
    "nextLevel": "Next Level",
    "levelOf": "Level {current} of {total}",
    "evaluatingCode": "ðŸ¤” Evaluating your code...",
    "excellentComplete": "ðŸŽ‰ Excellent! You completed this level!",
    "notQuiteRight": "Not quite right. Let's review your solution:",
    "yourOutput": "Your output:",
    "expectedOutput": "Expected output:",
    "tipLabel": "Tip:",
    "conceptLabel": "ðŸ“š Concept:",
    "helloWorldConcept": "Think of print() like talking to your computer. When you want the computer to show something on the screen, you use print().\n\nExample:\nprint('Hi there!')  # Computer shows: Hi there!\nprint('My name is Bob')  # Computer shows: My name is Bob\n\nJust put your text inside quotes and parentheses!",
    "variablesNumbersConcept": "A variable is like a box with a label. You can put things inside and use them later!\n\nExample:\nage = 25  # Put number 25 in a box labeled 'age'\nprint(age)  # Shows: 25\n\nname = 'Alice'  # Put text 'Alice' in a box labeled 'name'\nprint(name)  # Shows: Alice\n\nThink: box_name = what_goes_inside",
    "stringVariablesConcept": "Strings are just text! Put any text inside quotes to make a string.\n\nExample:\nname = 'Python'  # This is a string\nprint('Hello, ' + name)  # Shows: Hello, Python\n\n# Even easier with f-strings:\nprint(f'Hello, {name}!')  # Shows: Hello, Python!\n\nUse f'' to mix text with variables easily!",
    "userInputConcept": "input() lets you ask the user a question and wait for their answer.\n\nExample:\nname = input('What is your name? ')  # Asks user\n# User types: Sarah\nprint(f'Nice to meet you, {name}!')  # Shows: Nice to meet you, Sarah!\n\nThe computer waits for the user to type something!",
    "basicMathConcept": "Python is like a calculator! You can do math with numbers.\n\nExample:\nprint(5 + 3)    # Shows: 8 (addition)\nprint(10 - 4)   # Shows: 6 (subtraction)\nprint(6 * 7)    # Shows: 42 (multiplication)\nprint(15 / 3)   # Shows: 5.0 (division)\n\nJust like math class: + - * /",
    "conditionalsConcept": "if statements let your program make choices, like 'if this is true, then do that'.\n\nExample:\nage = 18\nif age >= 18:\n    print('You can vote!')  # Only runs if age is 18 or more\n\nCommon comparisons:\n> (greater than)  < (less than)  == (equal to)",
    "forLoopsConcept": "for loops repeat code multiple times. Like doing jumping jacks - you do the same thing over and over!\n\nExample:\nfor i in range(3):  # Do this 3 times\n    print('Hello!')  # This runs 3 times\n# Shows: Hello! Hello! Hello!\n\nrange(3) means: 0, 1, 2 (starts at 0!)",
    "whileLoopsConcept": "while loops keep going as long as something is true. Like 'while I'm hungry, keep eating'.\n\nExample:\ncount = 1\nwhile count <= 3:  # Keep going while count is 3 or less\n    print(count)   # Shows the number\n    count = count + 1  # Make count bigger\n# Shows: 1, 2, 3",
    "listsBasicsConcept": "Lists hold multiple things in one place, like a shopping list!\n\nExample:\nfruits = ['apple', 'banana', 'orange']  # A list of fruits\nprint(fruits[0])  # Shows: apple (first item)\nprint(fruits[1])  # Shows: banana (second item)\n\nRemember: counting starts at 0, not 1!",
    "listOperationsConcept": "You can change lists - add things, remove things, just like a real list!\n\nExample:\nnumbers = [1, 2, 3]  # Start with this list\nnumbers.append(4)    # Add 4 to the end\nprint(numbers)       # Shows: [1, 2, 3, 4]\n\nappend() means 'add to the end'",
    "functionsBasicsConcept": "Functions are like recipes - write the steps once, use them many times!\n\nExample:\ndef say_hello():     # Create a recipe called 'say_hello'\n    print('Hello!')  # The steps of the recipe\n\nsay_hello()  # Use the recipe (call the function)\n# Shows: Hello!",
    "functionsParametersConcept": "Functions can take inputs (like ingredients for a recipe) to work with different data.\n\nExample:\ndef greet(name):  # Function takes a 'name' input\n    print(f'Hello, {name}!')\n\ngreet('Alice')  # Give 'Alice' as input\n# Shows: Hello, Alice!\n\nThe input goes in the parentheses!",
    "dictionariesConcept": "Dictionaries are like phone books - you look up a name (key) to find a phone number (value).\n\nExample:\nperson = {'name': 'Alice', 'age': 30}  # key: value pairs\nprint(person['name'])  # Look up 'name', shows: Alice\nprint(person['age'])   # Look up 'age', shows: 30\n\nUse {key: value} format!",
    "stringMethodsConcept": "Strings have special powers (methods) to change themselves!\n\nExample:\ntext = 'hello world'\nprint(text.upper())    # Shows: HELLO WORLD\nprint(text.lower())    # Shows: hello world\nprint(text.title())    # Shows: Hello World\n\nUse dot (.) to access string powers!",
    "finalChallengeConcept": "Time to combine everything! Like cooking - you use multiple ingredients and techniques.\n\nExample of what we'll combine:\n- Lists: [1, 2, 3, 4, 5]\n- For loops: for number in list\n- Math: number * 2\n- Print: print(result)\n\nBreak big problems into small steps!",
    "exampleLabel": "ðŸ’¡ Example:",
    "tryItLabel": "Now try it yourself!",
    "aiThinking": "ðŸ¤– AI is analyzing your code...",
    "aiHelpLabel": "ðŸ¤– AI Tutor Says:",
    "correctSolutionLabel": "âœ… Correct Solution:",
    "aiTipLabel": "ðŸ’¡ AI Tip:",
    "tryAgainButton": "Try Again" 
  },
  "es-ES": {
    "helloWorldTitle": "Hola Mundo",
    "helloWorldDescription": "Â¡Bienvenido a Python! Comencemos con el programa tradicional.",
    "helloWorldTask": "Escribe un programa que imprima 'Â¡Hola, Mundo!' en la consola.",
    "helloWorldHint": "Usa la funciÃ³n print() con el texto entre comillas: print('Â¡Hola, Mundo!')",
    "variablesNumbersTitle": "Variables y NÃºmeros",
    "variablesNumbersDescription": "Aprende a almacenar y trabajar con nÃºmeros usando variables.",
    "variablesNumbersTask": "Crea una variable llamada 'edad' con valor 25, luego imprÃ­mela.",
    "variablesNumbersHint": "Crea una variable: edad = 25, luego imprÃ­mela: print(edad)",
    "stringVariablesTitle": "Variables de Cadena",
    "stringVariablesDescription": "Trabaja con datos de texto usando variables de cadena.",
    "stringVariablesTask": "Crea una variable llamada 'nombre' con tu nombre, luego imprime 'Â¡Hola, [nombre]!'",
    "stringVariablesHint": "Usa concatenaciÃ³n de cadenas o f-strings: print(f'Â¡Hola, {nombre}!')",
    "userInputTitle": "Entrada del Usuario",
    "userInputDescription": "Aprende a obtener entrada de los usuarios y responder.",
    "userInputTask": "Pregunta por el color favorito del usuario e imprime 'Tu color favorito es [color]'",
    "userInputHint": "Usa input() para obtener entrada del usuario: color = input('Â¿CuÃ¡l es tu color favorito? ')",
    "basicMathTitle": "MatemÃ¡ticas BÃ¡sicas",
    "basicMathDescription": "Realiza operaciones matemÃ¡ticas en Python.",
    "basicMathTask": "Calcula 15 + 27 e imprime el resultado.",
    "basicMathHint": "Usa el operador +: print(15 + 27)",
    "conditionalsTitle": "Condicionales",
    "conditionalsDescription": "Toma decisiones en tu cÃ³digo con declaraciones if.",
    "conditionalsTask": "Verifica si el nÃºmero 10 es mayor que 5. Si es verdadero, imprime 'SÃ­, 10 es mayor que 5'",
    "conditionalsHint": "Usa declaraciÃ³n if: if numero > 5: print('SÃ­, 10 es mayor que 5')",
    "forLoopsTitle": "Bucles For",
    "forLoopsDescription": "Repite acciones usando bucles for.",
    "forLoopsTask": "Imprime nÃºmeros del 1 al 3 usando un bucle for.",
    "forLoopsHint": "Usa range(): for i in range(1, 4): print(i)",
    "whileLoopsTitle": "Bucles While",
    "whileLoopsDescription": "Usa bucles while para repeticiÃ³n condicional.",
    "whileLoopsTask": "Imprime nÃºmeros del 1 al 3 usando un bucle while.",
    "whileLoopsHint": "Incrementa contador en cada iteraciÃ³n: while contador <= 3: print(contador); contador += 1",
    "listsBasicsTitle": "Fundamentos de Listas",
    "listsBasicsDescription": "Almacena mÃºltiples elementos en listas.",
    "listsBasicsTask": "Crea una lista con frutas ['manzana', 'plÃ¡tano', 'naranja'] e imprime el segundo elemento.",
    "listsBasicsHint": "Las listas usan indexaciÃ³n basada en cero: frutas[1] obtiene el segundo elemento",
    "listOperationsTitle": "Operaciones de Lista",
    "listOperationsDescription": "Agrega y modifica elementos de lista.",
    "listOperationsTask": "Crea una lista [1, 2, 3], agrega el nÃºmero 4, luego imprime toda la lista.",
    "listOperationsHint": "Usa el mÃ©todo append(): numeros.append(4), luego print(numeros)",
    "functionsBasicsTitle": "Fundamentos de Funciones",
    "functionsBasicsDescription": "Crea cÃ³digo reutilizable con funciones.",
    "functionsBasicsTask": "Define una funciÃ³n llamada 'saludar' que imprima 'Â¡Hola!' y luego llÃ¡mala.",
    "functionsBasicsHint": "Usa la palabra clave def: def saludar(): print('Â¡Hola!'), luego llama saludar()",
    "functionsParametersTitle": "Funciones con ParÃ¡metros",
    "functionsParametersDescription": "Pasa datos a funciones usando parÃ¡metros.",
    "functionsParametersTask": "Crea una funciÃ³n 'decir_hola' que tome un parÃ¡metro nombre e imprima 'Â¡Hola, [nombre]!'. LlÃ¡mala con 'Mundo'.",
    "functionsParametersHint": "def decir_hola(nombre): print(f'Â¡Hola, {nombre}!'), luego llama decir_hola('Mundo')",
    "dictionariesTitle": "Diccionarios",
    "dictionariesDescription": "Almacena pares clave-valor usando diccionarios.",
    "dictionariesTask": "Crea un diccionario con informaciÃ³n de persona: nombre='Alicia', edad=30. Imprime el nombre.",
    "dictionariesHint": "Usa llaves: persona = {'nombre': 'Alicia', 'edad': 30}, accede con persona['nombre']",
    "stringMethodsTitle": "MÃ©todos de Cadena",
    "stringMethodsDescription": "Manipula cadenas con mÃ©todos incorporados.",
    "stringMethodsTask": "Toma la cadena 'programaciÃ³n python' e imprÃ­mela en mayÃºsculas.",
    "stringMethodsHint": "Usa el mÃ©todo upper(): texto.upper()",
    "finalChallengeTitle": "DesafÃ­o Final",
    "finalChallengeDescription": "Â¡Combina todo lo que has aprendido!",
    "finalChallengeTask": "Crea una lista de nÃºmeros [1,2,3,4,5], usa un bucle for para imprimir cada nÃºmero multiplicado por 2.",
    "finalChallengeHint": "Recorre la lista: for num in numeros: print(num * 2)",
    "starterCodeComment": "# Escribe tu cÃ³digo aquÃ­\n",
    "createVariableComment": "# Crea una variable e imprÃ­mela\n",
    "createStringComment": "# Crea una variable de cadena\n",
    "getUserInputComment": "# ObtÃ©n entrada del usuario y responde\n",
    "calculateSumComment": "# Calcula e imprime la suma\n",
    "useIfStatementComment": "# Usa una declaraciÃ³n if\nnumero = 10\n",
    "useForLoopComment": "# Usa un bucle for para imprimir nÃºmeros\n",
    "useWhileLoopComment": "# Usa un bucle while\ncontador = 1\n",
    "createListComment": "# Crea una lista y accede a elementos\n",
    "createListAddComment": "# Crea lista y agrega elemento\n",
    "defineFunctionComment": "# Define y llama una funciÃ³n\n",
    "functionParameterComment": "# FunciÃ³n con parÃ¡metro\n",
    "createDictionaryComment": "# Crea y usa un diccionario\n",
    "stringMethodsComment": "# Usa mÃ©todos de cadena\ntexto = 'programaciÃ³n python'\n",
    "finalChallengeComment": "# DesafÃ­o final - combina conceptos\n",
    "appTitle": "LearnPy",
    "levelsProgress": "Niveles",
    "streakLabel": "racha",
    "levelButton": "Nivel",
    "overallProgress": "Progreso General",
    "selectLevel": "Seleccionar Nivel",
    "closeButton": "Ã—",
    "taskLabel": "Tarea:",
    "showHint": "Mostrar Pista",
    "hideHint": "Ocultar Pista",
    "pythonCodeEditor": "Editor de CÃ³digo Python",
    "resetButton": "Reiniciar",
    "runCodeButton": "Ejecutar CÃ³digo",
    "codeEditorPlaceholder": "Escribe tu cÃ³digo Python aquÃ­...",
    "previousLevel": "Nivel Anterior",
    "nextLevel": "Siguiente Nivel",
    "levelOf": "Nivel {current} de {total}",
    "evaluatingCode": "ðŸ¤” Evaluando tu cÃ³digo...",
    "excellentComplete": "ðŸŽ‰ Â¡Excelente! Â¡Completaste este nivel!",
    "notQuiteRight": "No estÃ¡ del todo bien. Revisemos tu soluciÃ³n:",
    "yourOutput": "Tu salida:",
    "expectedOutput": "Salida esperada:",
    "tipLabel": "Consejo:",
    "conceptLabel": "ðŸ“š Concepto:",
    "helloWorldConcept": "Piensa en print() como hablar con tu computadora. Cuando quieres que la computadora muestre algo en la pantalla, usas print().\n\nEjemplo:\nprint('Â¡Hola!')  # La computadora muestra: Â¡Hola!\nprint('Me llamo Ana')  # La computadora muestra: Me llamo Ana\n\nÂ¡Solo pon tu texto dentro de comillas y parÃ©ntesis!",
    "variablesNumbersConcept": "Una variable es como una caja con una etiqueta. Â¡Puedes poner cosas adentro y usarlas despuÃ©s!\n\nEjemplo:\nedad = 25  # Poner el nÃºmero 25 en una caja llamada 'edad'\nprint(edad)  # Muestra: 25\n\nnombre = 'Ana'  # Poner texto 'Ana' en una caja llamada 'nombre'\nprint(nombre)  # Muestra: Ana\n\nPiensa: nombre_caja = lo_que_va_adentro",
    "stringVariablesConcept": "Â¡Las cadenas son solo texto! Pon cualquier texto dentro de comillas para hacer una cadena.\n\nEjemplo:\nnombre = 'Python'  # Esto es una cadena\nprint('Hola, ' + nombre)  # Muestra: Hola, Python\n\n# AÃºn mÃ¡s fÃ¡cil con f-strings:\nprint(f'Â¡Hola, {nombre}!')  # Muestra: Â¡Hola, Python!\n\nÂ¡Usa f'' para mezclar texto con variables fÃ¡cilmente!",
    "userInputConcept": "input() te permite hacer una pregunta al usuario y esperar su respuesta.\n\nEjemplo:\nnombre = input('Â¿CÃ³mo te llamas? ')  # Pregunta al usuario\n# Usuario escribe: Sara\nprint(f'Â¡Mucho gusto, {nombre}!')  # Muestra: Â¡Mucho gusto, Sara!\n\nÂ¡La computadora espera a que el usuario escriba algo!",
    "basicMathConcept": "Â¡Python es como una calculadora! Puedes hacer matemÃ¡ticas con nÃºmeros.\n\nEjemplo:\nprint(5 + 3)    # Muestra: 8 (suma)\nprint(10 - 4)   # Muestra: 6 (resta)\nprint(6 * 7)    # Muestra: 42 (multiplicaciÃ³n)\nprint(15 / 3)   # Muestra: 5.0 (divisiÃ³n)\n\nIgual que en matemÃ¡ticas: + - * /",
    "conditionalsConcept": "Las declaraciones if permiten que tu programa tome decisiones, como 'si esto es verdad, entonces haz eso'.\n\nEjemplo:\nedad = 18\nif edad >= 18:\n    print('Â¡Puedes votar!')  # Solo se ejecuta si edad es 18 o mÃ¡s\n\nComparaciones comunes:\n> (mayor que)  < (menor que)  == (igual a)",
    "forLoopsConcept": "Los bucles for repiten cÃ³digo mÃºltiples veces. Â¡Como hacer ejercicios - haces lo mismo una y otra vez!\n\nEjemplo:\nfor i in range(3):  # Hacer esto 3 veces\n    print('Â¡Hola!')  # Esto se ejecuta 3 veces\n# Muestra: Â¡Hola! Â¡Hola! Â¡Hola!\n\nrange(3) significa: 0, 1, 2 (Â¡empieza en 0!)",
    "whileLoopsConcept": "Los bucles while siguen mientras algo sea verdadero. Como 'mientras tenga hambre, sigue comiendo'.\n\nEjemplo:\ncontador = 1\nwhile contador <= 3:  # Seguir mientras contador sea 3 o menos\n    print(contador)   # Muestra el nÃºmero\n    contador = contador + 1  # Hacer contador mÃ¡s grande\n# Muestra: 1, 2, 3",
    "listsBasicsConcept": "Â¡Las listas guardan mÃºltiples cosas en un lugar, como una lista de compras!\n\nEjemplo:\nfrutas = ['manzana', 'plÃ¡tano', 'naranja']  # Una lista de frutas\nprint(frutas[0])  # Muestra: manzana (primer elemento)\nprint(frutas[1])  # Muestra: plÃ¡tano (segundo elemento)\n\nÂ¡Recuerda: contar empieza en 0, no en 1!",
    "listOperationsConcept": "Puedes cambiar listas - agregar cosas, quitar cosas, Â¡como una lista real!\n\nEjemplo:\nnumeros = [1, 2, 3]  # Empezar con esta lista\nnumeros.append(4)    # Agregar 4 al final\nprint(numeros)       # Muestra: [1, 2, 3, 4]\n\nappend() significa 'agregar al final'",
    "functionsBasicsConcept": "Â¡Las funciones son como recetas - escribes los pasos una vez, los usas muchas veces!\n\nEjemplo:\ndef decir_hola():     # Crear una receta llamada 'decir_hola'\n    print('Â¡Hola!')  # Los pasos de la receta\n\ndecir_hola()  # Usar la receta (llamar la funciÃ³n)\n# Muestra: Â¡Hola!",
    "functionsParametersConcept": "Las funciones pueden tomar entradas (como ingredientes para una receta) para trabajar con diferentes datos.\n\nEjemplo:\ndef saludar(nombre):  # La funciÃ³n toma una entrada 'nombre'\n    print(f'Â¡Hola, {nombre}!')\n\nsaludar('Ana')  # Dar 'Ana' como entrada\n# Muestra: Â¡Hola, Ana!\n\nÂ¡La entrada va en los parÃ©ntesis!",
    "dictionariesConcept": "Los diccionarios son como guÃ­as telefÃ³nicas - buscas un nombre (clave) para encontrar un nÃºmero (valor).\n\nEjemplo:\npersona = {'nombre': 'Ana', 'edad': 30}  # pares clave: valor\nprint(persona['nombre'])  # Buscar 'nombre', muestra: Ana\nprint(persona['edad'])   # Buscar 'edad', muestra: 30\n\nÂ¡Usa formato {clave: valor}!",
    "stringMethodsConcept": "Â¡Las cadenas tienen poderes especiales (mÃ©todos) para cambiarse a sÃ­ mismas!\n\nEjemplo:\ntexto = 'hola mundo'\nprint(texto.upper())    # Muestra: HOLA MUNDO\nprint(texto.lower())    # Muestra: hola mundo\nprint(texto.title())    # Muestra: Hola Mundo\n\nÂ¡Usa punto (.) para acceder a los poderes de las cadenas!",
    "finalChallengeConcept": "Â¡Hora de combinar todo! Como cocinar - usas mÃºltiples ingredientes y tÃ©cnicas.\n\nEjemplo de lo que combinaremos:\n- Listas: [1, 2, 3, 4, 5]\n- Bucles for: for numero in lista\n- MatemÃ¡ticas: numero * 2\n- Print: print(resultado)\n\nÂ¡Divide problemas grandes en pasos pequeÃ±os!",
    "exampleLabel": "ðŸ’¡ Ejemplo:",
    "tryItLabel": "Â¡Ahora intÃ©ntalo tÃº mismo!",
    "aiThinking": "ðŸ¤– La IA estÃ¡ analizando tu cÃ³digo...",
    "aiHelpLabel": "ðŸ¤– El Tutor IA Dice:",
    "correctSolutionLabel": "âœ… SoluciÃ³n Correcta:",
    "aiTipLabel": "ðŸ’¡ Consejo de IA:",
    "tryAgainButton": "Intentar de Nuevo"
  }
};