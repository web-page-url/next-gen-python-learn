export const TRANSLATIONS: Record<string, Record<string, string>> = {
  "en-US": {
    "helloWorldTitle": "Hello World",
    "helloWorldDescription": "Welcome to Python! Let's start with the traditional first program.",
    "helloWorldTask": "Write a program that prints 'Hello, World!' to the console.",
    "helloWorldHint": "Use the print() function with the text in quotes: print('Hello, World!')",
    "variablesNumbersTitle": "Variables and Numbers",
    "variablesNumbersDescription": "Learn to store and work with numbers using variables.",
    "variablesNumbersTask": "Create a variable called 'age' with value 25, then print it.",
    "variablesNumbersHint": "Create a variable: age = 25, then print it: print(age)",
    "stringVariablesTitle": "String Variables",
    "stringVariablesDescription": "Work with text data using string variables.",
    "stringVariablesTask": "Create a variable called 'name' with your name, then print 'Hello, [name]!'",
    "stringVariablesHint": "Use string concatenation or f-strings: print(f'Hello, {name}!')",
    "userInputTitle": "User Input",
    "userInputDescription": "Learn to get input from users and respond.",
    "userInputTask": "Ask for the user's favorite color and print 'Your favorite color is [color]'",
    "userInputHint": "Use input() to get user input: color = input('What is your favorite color? ')",
    "basicMathTitle": "Basic Math",
    "basicMathDescription": "Perform mathematical operations in Python.",
    "basicMathTask": "Calculate 15 + 27 and print the result.",
    "basicMathHint": "Use the + operator: print(15 + 27)",
    "conditionalsTitle": "Conditionals",
    "conditionalsDescription": "Make decisions in your code with if statements.",
    "conditionalsTask": "Check if the number 10 is greater than 5. If true, print 'Yes, 10 is greater than 5'",
    "conditionalsHint": "Use if statement: if number > 5: print('Yes, 10 is greater than 5')",
    "forLoopsTitle": "For Loops",
    "forLoopsDescription": "Repeat actions using for loops.",
    "forLoopsTask": "Print numbers from 1 to 3 using a for loop.",
    "forLoopsHint": "Use range(): for i in range(1, 4): print(i)",
    "whileLoopsTitle": "While Loops",
    "whileLoopsDescription": "Use while loops for conditional repetition.",
    "whileLoopsTask": "Print numbers from 1 to 3 using a while loop.",
    "whileLoopsHint": "Increment count each iteration: while count <= 3: print(count); count += 1",
    "listsBasicsTitle": "Lists Basics",
    "listsBasicsDescription": "Store multiple items in lists.",
    "listsBasicsTask": "Create a list with fruits ['apple', 'banana', 'orange'] and print the second item.",
    "listsBasicsHint": "Lists use zero-based indexing: fruits[1] gets the second item",
    "listOperationsTitle": "List Operations",
    "listOperationsDescription": "Add and modify list items.",
    "listOperationsTask": "Create a list [1, 2, 3], add the number 4, then print the entire list.",
    "listOperationsHint": "Use append() method: numbers.append(4), then print(numbers)",
    "functionsBasicsTitle": "Functions Basics",
    "functionsBasicsDescription": "Create reusable code with functions.",
    "functionsBasicsTask": "Define a function called 'greet' that prints 'Hello!' and then call it.",
    "functionsBasicsHint": "Use def keyword: def greet(): print('Hello!'), then call greet()",
    "functionsParametersTitle": "Functions with Parameters",
    "functionsParametersDescription": "Pass data to functions using parameters.",
    "functionsParametersTask": "Create a function 'say_hello' that takes a name parameter and prints 'Hello, [name]!'. Call it with 'World'.",
    "functionsParametersHint": "def say_hello(name): print(f'Hello, {name}!'), then call say_hello('World')",
    "dictionariesTitle": "Dictionaries",
    "dictionariesDescription": "Store key-value pairs using dictionaries.",
    "dictionariesTask": "Create a dictionary with person info: name='Alice', age=30. Print the name.",
    "dictionariesHint": "Use curly braces: person = {'name': 'Alice', 'age': 30}, access with person['name']",
    "stringMethodsTitle": "String Methods",
    "stringMethodsDescription": "Manipulate strings with built-in methods.",
    "stringMethodsTask": "Take the string 'python programming' and print it in uppercase.",
    "stringMethodsHint": "Use the upper() method: text.upper()",
    "finalChallengeTitle": "Final Challenge",
    "finalChallengeDescription": "Combine everything you've learned!",
    "finalChallengeTask": "Create a list of numbers [1,2,3,4,5], use a for loop to print each number multiplied by 2.",
    "finalChallengeHint": "Loop through the list: for num in numbers: print(num * 2)",
    "starterCodeComment": "# Write your code here\n",
    "createVariableComment": "# Create a variable and print it\n",
    "createStringComment": "# Create a string variable\n",
    "getUserInputComment": "# Get user input and respond\n",
    "calculateSumComment": "# Calculate and print the sum\n",
    "useIfStatementComment": "# Use an if statement\nnumber = 10\n",
    "useForLoopComment": "# Use a for loop to print numbers\n",
    "useWhileLoopComment": "# Use a while loop\ncount = 1\n",
    "createListComment": "# Create a list and access items\n",
    "createListAddComment": "# Create list and add item\n",
    "defineFunctionComment": "# Define and call a function\n",
    "functionParameterComment": "# Function with parameter\n",
    "createDictionaryComment": "# Create and use a dictionary\n",
    "stringMethodsComment": "# Use string methods\ntext = 'python programming'\n",
    "finalChallengeComment": "# Final challenge - combine concepts\n",
    "appTitle": "LearnPy",
    "levelsProgress": "Levels",
    "streakLabel": "streak",
    "levelButton": "Level",
    "overallProgress": "Overall Progress",
    "selectLevel": "Select Level",
    "closeButton": "Ã—",
    "taskLabel": "Task:",
    "showHint": "Show Hint",
    "hideHint": "Hide Hint",
    "pythonCodeEditor": "Python Code Editor",
    "resetButton": "Reset",
    "runCodeButton": "Run Code",
    "codeEditorPlaceholder": "Write your Python code here...",
    "previousLevel": "Previous Level",
    "nextLevel": "Next Level",
    "levelOf": "Level {current} of {total}",
    "evaluatingCode": "ðŸ¤” Evaluating your code...",
    "excellentComplete": "ðŸŽ‰ Excellent! You completed this level!",
    "notQuiteRight": "Not quite right. Let's review your solution:",
    "yourOutput": "Your output:",
    "expectedOutput": "Expected output:",
    "tipLabel": "Tip:",
    "conceptLabel": "ðŸ“š Concept:",
    "helloWorldConcept": "Think of print() like talking to your computer. When you want the computer to show something on the screen, you use print().\n\nExample:\nprint('Hi there!')  # Computer shows: Hi there!\nprint('My name is Bob')  # Computer shows: My name is Bob\n\nJust put your text inside quotes and parentheses!",
    "variablesNumbersConcept": "A variable is like a box with a label. You can put things inside and use them later!\n\nExample:\nage = 25  # Put number 25 in a box labeled 'age'\nprint(age)  # Shows: 25\n\nname = 'Alice'  # Put text 'Alice' in a box labeled 'name'\nprint(name)  # Shows: Alice\n\nThink: box_name = what_goes_inside",
    "stringVariablesConcept": "Strings are just text! Put any text inside quotes to make a string.\n\nExample:\nname = 'Python'  # This is a string\nprint('Hello, ' + name)  # Shows: Hello, Python\n\n# Even easier with f-strings:\nprint(f'Hello, {name}!')  # Shows: Hello, Python!\n\nUse f'' to mix text with variables easily!",
    "userInputConcept": "input() lets you ask the user a question and wait for their answer.\n\nExample:\nname = input('What is your name? ')  # Asks user\n# User types: Sarah\nprint(f'Nice to meet you, {name}!')  # Shows: Nice to meet you, Sarah!\n\nThe computer waits for the user to type something!",
    "basicMathConcept": "Python is like a calculator! You can do math with numbers.\n\nExample:\nprint(5 + 3)    # Shows: 8 (addition)\nprint(10 - 4)   # Shows: 6 (subtraction)\nprint(6 * 7)    # Shows: 42 (multiplication)\nprint(15 / 3)   # Shows: 5.0 (division)\n\nJust like math class: + - * /",
    "conditionalsConcept": "if statements let your program make choices, like 'if this is true, then do that'.\n\nExample:\nage = 18\nif age >= 18:\n    print('You can vote!')  # Only runs if age is 18 or more\n\nCommon comparisons:\n> (greater than)  < (less than)  == (equal to)",
    "forLoopsConcept": "for loops repeat code multiple times. Like doing jumping jacks - you do the same thing over and over!\n\nExample:\nfor i in range(3):  # Do this 3 times\n    print('Hello!')  # This runs 3 times\n# Shows: Hello! Hello! Hello!\n\nrange(3) means: 0, 1, 2 (starts at 0!)",
    "whileLoopsConcept": "while loops keep going as long as something is true. Like 'while I'm hungry, keep eating'.\n\nExample:\ncount = 1\nwhile count <= 3:  # Keep going while count is 3 or less\n    print(count)   # Shows the number\n    count = count + 1  # Make count bigger\n# Shows: 1, 2, 3",
    "listsBasicsConcept": "Lists hold multiple things in one place, like a shopping list!\n\nExample:\nfruits = ['apple', 'banana', 'orange']  # A list of fruits\nprint(fruits[0])  # Shows: apple (first item)\nprint(fruits[1])  # Shows: banana (second item)\n\nRemember: counting starts at 0, not 1!",
    "listOperationsConcept": "You can change lists - add things, remove things, just like a real list!\n\nExample:\nnumbers = [1, 2, 3]  # Start with this list\nnumbers.append(4)    # Add 4 to the end\nprint(numbers)       # Shows: [1, 2, 3, 4]\n\nappend() means 'add to the end'",
    "functionsBasicsConcept": "Functions are like recipes - write the steps once, use them many times!\n\nExample:\ndef say_hello():     # Create a recipe called 'say_hello'\n    print('Hello!')  # The steps of the recipe\n\nsay_hello()  # Use the recipe (call the function)\n# Shows: Hello!",
    "functionsParametersConcept": "Functions can take inputs (like ingredients for a recipe) to work with different data.\n\nExample:\ndef greet(name):  # Function takes a 'name' input\n    print(f'Hello, {name}!')\n\ngreet('Alice')  # Give 'Alice' as input\n# Shows: Hello, Alice!\n\nThe input goes in the parentheses!",
    "dictionariesConcept": "Dictionaries are like phone books - you look up a name (key) to find a phone number (value).\n\nExample:\nperson = {'name': 'Alice', 'age': 30}  # key: value pairs\nprint(person['name'])  # Look up 'name', shows: Alice\nprint(person['age'])   # Look up 'age', shows: 30\n\nUse {key: value} format!",
    "stringMethodsConcept": "Strings have special powers (methods) to change themselves!\n\nExample:\ntext = 'hello world'\nprint(text.upper())    # Shows: HELLO WORLD\nprint(text.lower())    # Shows: hello world\nprint(text.title())    # Shows: Hello World\n\nUse dot (.) to access string powers!",
    "finalChallengeConcept": "Time to combine everything! Like cooking - you use multiple ingredients and techniques.\n\nExample of what we'll combine:\n- Lists: [1, 2, 3, 4, 5]\n- For loops: for number in list\n- Math: number * 2\n- Print: print(result)\n\nBreak big problems into small steps!",
    "exampleLabel": "ðŸ’¡ Example:",
    "tryItLabel": "Now try it yourself!",
    "aiThinking": "ðŸ¤– AI is analyzing your code...",
    "aiHelpLabel": "ðŸ¤– AI Tutor Says:",
    "correctSolutionLabel": "âœ… Correct Solution:",
    "aiTipLabel": "ðŸ’¡ AI Tip:",
    "tryAgainButton": "Try Again" 
  }
};